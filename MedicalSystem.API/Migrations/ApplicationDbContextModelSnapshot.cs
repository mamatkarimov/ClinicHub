// <auto-generated />
using MedicalSystem.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;

#nullable disable

namespace MedicalSystem.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MedicalSystem.API.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MedicalSystem.API.Models.DTOs.Appointment", b =>
                {
                    b.Property<int>("AppointmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentID"));

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Diagnosis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoctorID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TreatmentPlan")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AppointmentID");

                    b.HasIndex("DoctorID");

                    b.HasIndex("PatientID");

                    b.HasIndex("AppointmentDate", "Status");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("MedicalSystem.API.Models.DTOs.Bed", b =>
                {
                    b.Property<int>("BedID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BedID"));

                    b.Property<string>("BedNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsOccupied")
                        .HasColumnType("bit");

                    b.Property<int>("WardID")
                        .HasColumnType("int");

                    b.HasKey("BedID");

                    b.HasIndex("WardID");

                    b.ToTable("Beds");
                });

            modelBuilder.Entity("MedicalSystem.API.Models.DTOs.Department", b =>
                {
                    b.Property<int>("DepartmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentID"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HeadDoctorID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepartmentID");

                    b.HasIndex("HeadDoctorID");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("MedicalSystem.API.Models.DTOs.Hospitalization", b =>
                {
                    b.Property<int>("HospitalizationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HospitalizationID"));

                    b.Property<DateTime>("AdmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AttendingDoctorID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BedID")
                        .HasColumnType("int");

                    b.Property<string>("DiagnosisOnAdmission")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiagnosisOnDischarge")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DischargeDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("HospitalizationID");

                    b.HasIndex("AttendingDoctorID");

                    b.HasIndex("BedID");

                    b.HasIndex("PatientID");

                    b.HasIndex("Status");

                    b.ToTable("Hospitalizations");
                });

            modelBuilder.Entity("MedicalSystem.API.Models.DTOs.InstrumentalStudy", b =>
                {
                    b.Property<int>("StudyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudyID"));

                    b.Property<string>("Conclusion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderedByID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<string>("PerformedByID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("PerformedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Results")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudyType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudyID");

                    b.HasIndex("OrderedByID");

                    b.HasIndex("PatientID");

                    b.HasIndex("PerformedByID");

                    b.ToTable("InstrumentalStudies");
                });

            modelBuilder.Entity("MedicalSystem.API.Models.DTOs.Invoice", b =>
                {
                    b.Property<int>("InvoiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceID"));

                    b.Property<string>("CreatedByID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PaidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("InvoiceID");

                    b.HasIndex("CreatedByID");

                    b.HasIndex("PatientID");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("MedicalSystem.API.Models.DTOs.InvoiceDetail", b =>
                {
                    b.Property<int>("InvoiceDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceDetailID"));

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("InvoiceID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("ServiceID")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("InvoiceDetailID");

                    b.HasIndex("InvoiceID");

                    b.HasIndex("ServiceID");

                    b.ToTable("InvoiceDetails");
                });

            modelBuilder.Entity("MedicalSystem.API.Models.DTOs.LabOrder", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderID"));

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderedByID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrderID");

                    b.HasIndex("OrderedByID");

                    b.HasIndex("PatientID");

                    b.HasIndex("Status");

                    b.ToTable("LabOrders");
                });

            modelBuilder.Entity("MedicalSystem.API.Models.DTOs.LabOrderDetail", b =>
                {
                    b.Property<int>("OrderDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDetailID"));

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<string>("PerformedByID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReferenceRange")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Result")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResultDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TestTypeID")
                        .HasColumnType("int");

                    b.HasKey("OrderDetailID");

                    b.HasIndex("OrderID");

                    b.HasIndex("PerformedByID");

                    b.HasIndex("TestTypeID");

                    b.ToTable("LabOrderDetails");
                });

            modelBuilder.Entity("MedicalSystem.API.Models.DTOs.LabTestType", b =>
                {
                    b.Property<int>("TestTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestTypeID"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalRange")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreparationInstructions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SampleType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TestName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TestTypeID");

                    b.ToTable("LabTestTypes");
                });

            modelBuilder.Entity("MedicalSystem.API.Models.DTOs.MedicalHistory", b =>
                {
                    b.Property<int>("HistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HistoryID"));

                    b.Property<int?>("AppointmentID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HistoryType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<DateTime>("RecordDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RecordedByID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("HistoryID");

                    b.HasIndex("AppointmentID");

                    b.HasIndex("PatientID");

                    b.HasIndex("RecordedByID");

                    b.ToTable("MedicalHistories");
                });

            modelBuilder.Entity("MedicalSystem.API.Models.DTOs.NurseRound", b =>
                {
                    b.Property<int>("RoundID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoundID"));

                    b.Property<string>("BloodPressure")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HospitalizationID")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NurseID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<int?>("Pulse")
                        .HasColumnType("int");

                    b.Property<int?>("RespirationRate")
                        .HasColumnType("int");

                    b.Property<DateTime>("RoundDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Temperature")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("RoundID");

                    b.HasIndex("HospitalizationID");

                    b.HasIndex("NurseID");

                    b.HasIndex("PatientID");

                    b.ToTable("NurseRounds");
                });

            modelBuilder.Entity("MedicalSystem.API.Models.DTOs.Patient", b =>
                {
                    b.Property<int>("PatientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientID"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("InsuranceCompany")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InsuranceNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PatientID");

                    b.HasIndex("BirthDate");

                    b.HasIndex("InsuranceNumber");

                    b.HasIndex("LastName", "FirstName", "MiddleName");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("MedicalSystem.API.Models.DTOs.PatientDiet", b =>
                {
                    b.Property<int>("DietID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DietID"));

                    b.Property<string>("DietType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("HospitalizationID")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DietID");

                    b.HasIndex("HospitalizationID");

                    b.HasIndex("PatientID");

                    b.ToTable("PatientDiets");
                });

            modelBuilder.Entity("MedicalSystem.API.Models.DTOs.PatientDocument", b =>
                {
                    b.Property<int>("DocumentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentID"));

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IssuedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.HasKey("DocumentID");

                    b.HasIndex("PatientID");

                    b.ToTable("PatientDocuments");
                });

            modelBuilder.Entity("MedicalSystem.API.Models.DTOs.PatientQueue", b =>
                {
                    b.Property<int>("QueueID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QueueID"));

                    b.Property<int?>("AppointmentID")
                        .HasColumnType("int");

                    b.Property<int?>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime>("QueueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("QueueID");

                    b.HasIndex("AppointmentID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("PatientID");

                    b.HasIndex("Status");

                    b.ToTable("PatientQueues");
                });

            modelBuilder.Entity("MedicalSystem.API.Models.DTOs.Payment", b =>
                {
                    b.Property<int>("PaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentID"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("InvoiceID")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceivedByID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PaymentID");

                    b.HasIndex("InvoiceID");

                    b.HasIndex("ReceivedByID");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("MedicalSystem.API.Models.DTOs.Prescription", b =>
                {
                    b.Property<int>("PrescriptionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrescriptionID"));

                    b.Property<string>("Dosage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Duration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Frequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instructions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Medication")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<string>("PrescribedByID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("PrescriptionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PrescriptionID");

                    b.HasIndex("PatientID");

                    b.HasIndex("PrescribedByID");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("MedicalSystem.API.Models.DTOs.Service", b =>
                {
                    b.Property<int>("ServiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceID"));

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiceID");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("MedicalSystem.API.Models.DTOs.Ward", b =>
                {
                    b.Property<int>("WardID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WardID"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<string>("GenderSpecific")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("WardNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WardID");

                    b.HasIndex("DepartmentID");

                    b.ToTable("Wards");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MedicalSystem.API.Models.DTOs.Appointment", b =>
                {
                    b.HasOne("MedicalSystem.API.Models.ApplicationUser", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MedicalSystem.API.Models.DTOs.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalSystem.API.Models.DTOs.Bed", b =>
                {
                    b.HasOne("MedicalSystem.API.Models.DTOs.Ward", "Ward")
                        .WithMany("Beds")
                        .HasForeignKey("WardID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("MedicalSystem.API.Models.DTOs.Department", b =>
                {
                    b.HasOne("MedicalSystem.API.Models.ApplicationUser", "HeadDoctor")
                        .WithMany()
                        .HasForeignKey("HeadDoctorID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("HeadDoctor");
                });

            modelBuilder.Entity("MedicalSystem.API.Models.DTOs.Hospitalization", b =>
                {
                    b.HasOne("MedicalSystem.API.Models.ApplicationUser", "AttendingDoctor")
                        .WithMany()
                        .HasForeignKey("AttendingDoctorID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MedicalSystem.API.Models.DTOs.Bed", "Bed")
                        .WithMany("Hospitalizations")
                        .HasForeignKey("BedID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MedicalSystem.API.Models.DTOs.Patient", "Patient")
                        .WithMany("Hospitalizations")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AttendingDoctor");

                    b.Navigation("Bed");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalSystem.API.Models.DTOs.InstrumentalStudy", b =>
                {
                    b.HasOne("MedicalSystem.API.Models.ApplicationUser", "OrderedBy")
                        .WithMany()
                        .HasForeignKey("OrderedByID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MedicalSystem.API.Models.DTOs.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalSystem.API.Models.ApplicationUser", "PerformedBy")
                        .WithMany()
                        .HasForeignKey("PerformedByID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("OrderedBy");

                    b.Navigation("Patient");

                    b.Navigation("PerformedBy");
                });

            modelBuilder.Entity("MedicalSystem.API.Models.DTOs.Invoice", b =>
                {
                    b.HasOne("MedicalSystem.API.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MedicalSystem.API.Models.DTOs.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalSystem.API.Models.DTOs.InvoiceDetail", b =>
                {
                    b.HasOne("MedicalSystem.API.Models.DTOs.Invoice", "Invoice")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("InvoiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalSystem.API.Models.DTOs.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("MedicalSystem.API.Models.DTOs.LabOrder", b =>
                {
                    b.HasOne("MedicalSystem.API.Models.ApplicationUser", "OrderedBy")
                        .WithMany()
                        .HasForeignKey("OrderedByID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MedicalSystem.API.Models.DTOs.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderedBy");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalSystem.API.Models.DTOs.LabOrderDetail", b =>
                {
                    b.HasOne("MedicalSystem.API.Models.DTOs.LabOrder", "LabOrder")
                        .WithMany("LabOrderDetails")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalSystem.API.Models.ApplicationUser", "PerformedBy")
                        .WithMany()
                        .HasForeignKey("PerformedByID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MedicalSystem.API.Models.DTOs.LabTestType", "TestType")
                        .WithMany("LabOrderDetails")
                        .HasForeignKey("TestTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LabOrder");

                    b.Navigation("PerformedBy");

                    b.Navigation("TestType");
                });

            modelBuilder.Entity("MedicalSystem.API.Models.DTOs.MedicalHistory", b =>
                {
                    b.HasOne("MedicalSystem.API.Models.DTOs.Appointment", "Appointment")
                        .WithMany("MedicalHistories")
                        .HasForeignKey("AppointmentID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MedicalSystem.API.Models.DTOs.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalSystem.API.Models.ApplicationUser", "RecordedBy")
                        .WithMany()
                        .HasForeignKey("RecordedByID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Patient");

                    b.Navigation("RecordedBy");
                });

            modelBuilder.Entity("MedicalSystem.API.Models.DTOs.NurseRound", b =>
                {
                    b.HasOne("MedicalSystem.API.Models.DTOs.Hospitalization", null)
                        .WithMany("NurseRounds")
                        .HasForeignKey("HospitalizationID");

                    b.HasOne("MedicalSystem.API.Models.ApplicationUser", "Nurse")
                        .WithMany()
                        .HasForeignKey("NurseID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MedicalSystem.API.Models.DTOs.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nurse");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalSystem.API.Models.DTOs.PatientDiet", b =>
                {
                    b.HasOne("MedicalSystem.API.Models.DTOs.Hospitalization", "Hospitalization")
                        .WithMany("PatientDiets")
                        .HasForeignKey("HospitalizationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MedicalSystem.API.Models.DTOs.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hospitalization");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalSystem.API.Models.DTOs.PatientDocument", b =>
                {
                    b.HasOne("MedicalSystem.API.Models.DTOs.Patient", "Patient")
                        .WithMany("PatientDocuments")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalSystem.API.Models.DTOs.PatientQueue", b =>
                {
                    b.HasOne("MedicalSystem.API.Models.DTOs.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentID");

                    b.HasOne("MedicalSystem.API.Models.DTOs.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MedicalSystem.API.Models.DTOs.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Department");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalSystem.API.Models.DTOs.Payment", b =>
                {
                    b.HasOne("MedicalSystem.API.Models.DTOs.Invoice", "Invoice")
                        .WithMany("Payments")
                        .HasForeignKey("InvoiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalSystem.API.Models.ApplicationUser", "ReceivedBy")
                        .WithMany()
                        .HasForeignKey("ReceivedByID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("ReceivedBy");
                });

            modelBuilder.Entity("MedicalSystem.API.Models.DTOs.Prescription", b =>
                {
                    b.HasOne("MedicalSystem.API.Models.DTOs.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalSystem.API.Models.ApplicationUser", "PrescribedBy")
                        .WithMany()
                        .HasForeignKey("PrescribedByID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("PrescribedBy");
                });

            modelBuilder.Entity("MedicalSystem.API.Models.DTOs.Ward", b =>
                {
                    b.HasOne("MedicalSystem.API.Models.DTOs.Department", "Department")
                        .WithMany("Wards")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MedicalSystem.API.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MedicalSystem.API.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalSystem.API.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MedicalSystem.API.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MedicalSystem.API.Models.DTOs.Appointment", b =>
                {
                    b.Navigation("MedicalHistories");
                });

            modelBuilder.Entity("MedicalSystem.API.Models.DTOs.Bed", b =>
                {
                    b.Navigation("Hospitalizations");
                });

            modelBuilder.Entity("MedicalSystem.API.Models.DTOs.Department", b =>
                {
                    b.Navigation("Wards");
                });

            modelBuilder.Entity("MedicalSystem.API.Models.DTOs.Hospitalization", b =>
                {
                    b.Navigation("NurseRounds");

                    b.Navigation("PatientDiets");
                });

            modelBuilder.Entity("MedicalSystem.API.Models.DTOs.Invoice", b =>
                {
                    b.Navigation("InvoiceDetails");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("MedicalSystem.API.Models.DTOs.LabOrder", b =>
                {
                    b.Navigation("LabOrderDetails");
                });

            modelBuilder.Entity("MedicalSystem.API.Models.DTOs.LabTestType", b =>
                {
                    b.Navigation("LabOrderDetails");
                });

            modelBuilder.Entity("MedicalSystem.API.Models.DTOs.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Hospitalizations");

                    b.Navigation("PatientDocuments");
                });

            modelBuilder.Entity("MedicalSystem.API.Models.DTOs.Ward", b =>
                {
                    b.Navigation("Beds");
                });
#pragma warning restore 612, 618
        }
    }
}
